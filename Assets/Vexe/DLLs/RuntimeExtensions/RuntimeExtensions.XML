<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RuntimeExtensions</name>
    </assembly>
    <members>
        <member name="M:Vexe.RuntimeExtensions.ComponentExtensions.ChangeState(UnityEngine.Component,System.Boolean)">
            <summary>
            Changes the component's state to the specified state
            Returns true on success
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.ComponentExtensions.ChangeState(UnityEngine.Component,System.Boolean,System.Reflection.PropertyInfo)">
            <summary>
            Changes the specified component's state to 'newState' using the passed enabled PropertyInfo
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.ComponentExtensions.GetState(UnityEngine.Component)">
            <summary>
            Returns the current state of the component
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.ComponentExtensions.GetState(UnityEngine.Component,System.Reflection.PropertyInfo)">
            <summary>
            Returns the current state of the component using the passed enabled PropertyInfo
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.ComponentExtensions.ToggleState(UnityEngine.Component)">
            <summary>
            Toggles the component's state
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.GenericEnumerableExtensions.Disinclude``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Returns a new version of the list that doesn't include the specified value
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.OtherExtensions.Memoize``1(System.Func{``0})">
            <summary>
            Memoizes the specified func - returns the memoized version
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.OtherExtensions.Memoize``2(System.Func{``0,``1})">
            <summary>
            Memoizes the specified func - returns the memoized version
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.OtherExtensions.Between``1(``0,``0,``0)">
            <summary>
            Returns true if this object's current value is between (greater or equal to) 'from' and (less than or equal to) 'to'
            Credits: http://extensionmethod.net/csharp/type/between
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.OtherExtensions.Clear(System.Text.StringBuilder)">
            <summary>
            Sets the builder's length to zero and returns it
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.RendererExtensions.IsVisibleFrom(UnityEngine.Renderer,UnityEngine.Camera)">
            <summary>
            Credits: http://wiki.unity3d.com/index.php?title=IsVisibleFrom
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.StringExtensions.ToProperCase(System.String)">
            <summary>
            "tHiS is a sTring TesT" -> "This Is A String Test"
            Credits: http://extensionmethod.net/csharp/string/topropercase 
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.StringExtensions.SplitCamelCase(System.String)">
            <summary>
            Ex: "thisIsCamelCase" -> "this Is Camel Case"
            Credits: http://stackoverflow.com/questions/155303/net-how-can-you-split-a-caps-delimited-string-into-an-array
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.StringExtensions.SplitPascalCase(System.String)">
            <summary>
            Ex: "thisIsCamelCase" -> "This Is Camel Case"
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.StringExtensions.NormalizePath(System.String)">
            <summary>
            Nomalizes this string by replacing all '/' with '\' and returns the normalized string instance
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.StringExtensions.NormalizePath(System.String,System.Char,System.Char)">
            <summary>
            Normalizes this string by replacing all 'from's by 'to's and returns the normalized instance
            Ex: "path/to\dir".NormalizePath('/', '\\') => "path\\to\\dir"
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.StringExtensions.ReplaceAt(System.String,System.Int32,System.Char)">
            <summary>
            Replaces the character specified by the passed index with newChar and returns the new string instance
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.StringExtensions.ToUpperAt(System.String,System.Int32)">
            <summary>
            Uppers the character specified by the passed index and returns the new string instance
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Returns true if this string is null or empty
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.TransformExtensions.Reset(UnityEngine.Transform)">
            <summary>
            Sets localPosition to Vector3.zero
            localRotation to Quaternion.identity
            and localScale to Vector3.one
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.TransformExtensions.GetChild(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Gets the child transform whose name is specified by 'wanted'
            The search is non-recursive by default unless true is passed to 'recursive'
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.TransformExtensions.AddChild(UnityEngine.Transform,System.String,UnityEngine.HideFlags)">
            <summary>
            Adds and returns a child transform to this transform with the specified name and HideFlags
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.TransformExtensions.GetOrAddChild(UnityEngine.Transform,System.String,System.Boolean,UnityEngine.HideFlags)">
            <summary>
            Gets or adds the child transform whose name is 'name'
            Pass true to 'recursive' if you want the search to be recursive
            Specify HideFlags if you want to add the child using those flags
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.TypeExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Alternative version of <see cref="M:System.Type.IsSubclassOf(System.Type)"/> that supports raw generic types (generic types without
            any type parameters).
            </summary>
            <param name="baseType">The base type class for which the check is made.</param>
            <param name="toCheck">To type to determine for whether it derives from <paramref name="baseType"/>.</param>
            Credits to JaredPar: http://stackoverflow.com/questions/457676/check-if-a-class-is-derived-from-a-generic-class
        </member>
        <member name="M:Vexe.RuntimeExtensions.TypeExtensions.GetFullName(System.Reflection.MethodInfo,System.String,System.Func{System.Type,System.String})">
            <summary>
            Returns the specified method's full name "methodName(argType1 arg1, argType2 arg2, etc)"
            Uses the specified gauntlet to replaces type names, ex: "int" instead of "Int32"
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.TypeExtensions.GetParamsNames(System.Reflection.MethodInfo,System.Func{System.Type,System.String})">
            <summary>
            Returns a string representing the passed method parameters names. Ex "int num, float damage, Transform target"
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.UEObjectExtensions.Destroy(UnityEngine.Object)">
            <summary>
            Calls Destroy on this object if we're in playmode, otherwise (edit-time) DestroyImmediate
            </summary>
        </member>
        <member name="M:Vexe.RuntimeExtensions.UEObjectExtensions.Refresh(UnityEngine.Object)">
            <summary>
            Attempts to double-toggle the state of this object
            Doesn't do anything if this object isn't a GameObject or a Component that supports the change of state
            </summary>
        </member>
    </members>
</doc>
